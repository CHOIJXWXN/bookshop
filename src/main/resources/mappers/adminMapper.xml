<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookshop.mappers.admin">

	<!-- "주문" 20개씩 : 주문번호 / 책id / 책 제목 / 작가 / 가격 / 수량 -->
	<select id="getOrderListSeparate" parameterType="hashmap" resultType="OrderPlus">
		SELECT F.order_num, F.book_id, D.book_title, D.book_writer, D.book_price, F.book_cnt
		FROM (
			SELECT A.order_num AS 'order_num', B.user_id AS 'user_id', A.book_id AS 'book_id', A.book_cnt AS 'book_cnt', B.order_status AS 'order_status'
			FROM ORDERLIST A, ORDERS B
			WHERE A.order_num = B.order_num
			AND A.order_num IN (
				SELECT C.order_num FROM (
					SELECT D.@ROWNUM := D.@ROWNUM + 1 AS ROWNUM, E.*
					FROM (SELECT D.@ROWNUM := 0) D, ORDERS E ORDER BY E.order_num DESC) C
				WHERE C.ROWNUM BETWEEN #{start} AND #{end}
			)
		) F, BOOK D
		WHERE F.book_id = D.book_id	
		ORDER BY F.order_num DESC
	</select>
	
	<!-- "주문" 20개씩 : 주문번호 / 회원id / 주문 상태 -->
	<select id="getOrderListUnited" parameterType="hashmap" resultType="OrderPlus">
		SELECT DISTINCT(F.order_num), F.user_id, F.order_status, COUNT(F.order_num) AS cnt
		FROM (
			SELECT A.order_num AS 'order_num', B.user_id AS 'user_id', A.book_id AS 'book_id', A.book_cnt AS 'book_cnt', B.order_status AS 'order_status' 
			FROM ORDERLIST A, ORDERS B
			WHERE A.order_num = B.order_num
			AND A.order_num IN (
				SELECT C.order_num FROM (
					SELECT D.@ROWNUM := D.@ROWNUM + 1 AS ROWNUM, E.*
					FROM (SELECT D.@ROWNUM := 0) D, ORDERS E ORDER BY E.order_num DESC) C
				WHERE D.ROWNUM BETWEEN #{start} AND #{end}
			)
		) F, BOOK D
		WHERE F.book_id = D.book_id   
		GROUP BY F.order_num
		ORDER BY F.order_num DESC
	</select>
   
	<!-- 페이징 -->
	<select id="getNextPageOrders" resultType="Orders">
		SELECT A.*
		FROM (SELECT R.@ROWNUM := R.@ROWNUM + 1 AS rownum, O.*
			FROM (SELECT R.@ROWNUM := 0) R,
			(SELECT O.*
			FROM ORDERS
			ORDER BY O.order_num DESC) O) A
		WHERE A.rownum = #{pageNumber}
	</select>
	
	<!-- 페이징 -->
	<select id="getNextPageBook" resultType="Book">
		SELECT A.*
		FROM (SELECT R.@ROWNUM := R.@ROWNUM + 1 AS rownum, O.*
			FROM (SELECT R.@ROWNUM := 0) R,
			(SELECT B.*
			FROM BOOK B) O) A
		WHERE A.rownum = #{pageNumber}
	</select>	
	
	<!-- 주문 상태 변경 -->
	<update id="changeStatus" parameterType="hashmap">
		UPDATE ORDERS
		SET order_status = #{order_status}
		WHERE order_num = #{order_num}
	</update>

	<insert id="addDelivery" parameterType="hashmap">
		INSERT DELIVERY
		VALUES (#{order_num}, #{tracking_num})
	</insert>
	
	<!-- 주문상태별 주문 개수 -->
	<select id="getOrderCnt" resultType="_int">
		SELECT COUNT(*)
		FROM ORDERS
		WHERE order_status = #{order_status}
	</select>
	
	<!-- 총 주문 개수 -->
	<select id="getTotCnt" resultType="_int">
		SELECT COUNT(*)
		FROM ORDERS
	</select>
	
	<!-- 책 20개 리스트 -->
	<select id="getBookList" resultType="Book">
		SELECT *
		FROM BOOK
		WHERE available = 0
		LIMIT #{start}, 20
	</select>
	
	<!-- 책 삭제 -->
	<update id="deleteBook">
		UPDATE BOOK
		SET available = 1
		WHERE book_id = #{book_id}
	</update>
	
	<!-- 책 입력 -->
	<insert id="addBook">
		INSERT INTO BOOK
		VALUES (#{book_id}, #{book_title}, #{book_writer}, #{book_pub}, #{book_date}, #{book_price}, #{book_genre}, 0, CONCAT(#{book_id}, '.jpg'), #{book_intro}, #{book_contents}, 0)
	</insert>	

	<!-- 문의 불러오기 -->
	<select id="getAdminAskList" resultType="AskList">	
		SELECT A.ask_id, B.book_title, A.ask_sort, A.ask_date, B.book_cover, A.askreply_count, A.writer, A.ask_status
		FROM ASK A, BOOK B
		WHERE A.book_id = B.book_id
		AND A.available = 0
		ORDER BY A.ask_id DESC
		LIMIT #{start}, 20
	</select>
	
	<!-- 페이징 -->
	<select id="getNextPageAsk" resultType="AskList">
		SELECT A.*
		FROM (SELECT R.@ROWNUM := R.@ROWNUM + 1 AS rownum, O.*
			FROM (SELECT R.@ROWNUM := 0) R,
			(SELECT B.*
			FROM ASK B
            ORDER by B.ask_id DESC) O) A
        WHERE A.ask_id = #{pageNumber};
	</select>	

</mapper>